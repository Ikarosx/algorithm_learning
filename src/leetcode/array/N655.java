package leetcode.array;

/**
 * 给你一个长度为 n 的整数数组，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。
 * <p>
 * 我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 <= i < n)，总满足 array[i] <=
 * array[i + 1]。
 * <p>
 *  
 * <p>
 * 示例 1:
 * <p>
 * 输入: nums = [4,2,3]
 * 输出: true
 * 解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。
 * 示例 2:
 * <p>
 * 输入: nums = [4,2,1]
 * 输出: false
 * 解释: 你不能在只改变一个元素的情况下将其变为非递减数列。
 *  
 * <p>
 * 说明：
 * <p>
 * 1 <= n <= 10 ^ 4
 * - 10 ^ 5 <= nums[i] <= 10 ^ 5
 *
 * @author Ikaros
 * @date 2020/4/15 21:49
 */
public class N655 {
    public boolean checkPossibility(int[] nums) {
        // 思路：
        // 只能改变一次，如果需要改变两次返回false
        
        // 判断这个数是否比前一个数小，
        // 如果大于等于，正确，
        // 如果小，那么尝试改变前一个数或者当前数使得这四个数有序
        // 假设当前下标为i，且nums[i] < nums[i - 1]
        // 则我们可以改变下标为i - 1的值或者下标为i的值
        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            // 确保了当前值小于前一个值
            if (nums[i] < nums[i - 1]) {
                count++;
                if (count == 2) {
                    return false;
                }
                // 一开始我想的是直接将前一个值或者后一个值相等即可
                // 但是会导致一些例子有误
                // 如1 5 3 4 应该将5变为3，不能将3变为5
                // 如1 4 5 3 6 应该将3变为5，不能将5变为3
                // 所以这里有条件限制
                
                if (i + 1 < nums.length && nums[i - 1] > nums[i + 1] && (i - 1 == 0 || nums[i - 2] <= nums[i])) {
                    // 什么时候改变下标为i - 1的值
                    // ①当 当前数的前一个数 大于 当前数的后一个数，即nums[i - 1] > nums[i + 1]
                    // ②并且 前一个数的前一个数 应该小于或者等于当前数，即nums[i - 2] <= nums[i]
                    // 为什么
                    // ①如果nums[i - 1] > nums[i + 1]
                    // 假设 1 5 3 4
                    // 当前下标i为2，值为3，因为5 > 4，所以不能将3变成5，只能将5变成3
                    // 否则变成1 5 5 4就错了
                    // ②反证法，如果nums[i - 2] > nums[i]
                    // 假设 1 4 5 3 6
                    // 根据这种情况，由于4 > 3，所以只能将3提为5
                    //
                    nums[i - 1] = nums[i];
                } else if (i - 1 != 0) {
                    // 改变下标为i的值
                    nums[i] = nums[i - 1];
                }
                
            }
        }
        return true;
    }
}
